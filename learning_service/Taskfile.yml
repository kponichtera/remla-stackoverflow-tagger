version: '3'

vars:
  BUILDER_IMAGE: learning_service_image

tasks:
  prepare:
    - task: venv_create
    - task: venv_activate
    - task: pip_install
  venv_create:
    cmds:
      - python3 -m venv venv
  venv_activate:
    cmds:
      - unameOut=tolower("$(uname -s)")
      - if [ unameOut == "msys" ] || [ unameOut == "cygwin" ]; then source venv/Scripts/activate; else source venv/bin/activate fi
  pip_install:
    cmds:
      - pip install -r requirements.txt
  build_docker:
    deps: [prepare]
    cmds: ["docker build -t {{.BUILDER_IMAGE}} ."]
  docker_run:
    deps: [build_builder]
    interactive: true
    vars:
      UID:
        sh: id -u
      GID:
        sh: id -g
      PWD:
        sh: pwd
      SERVICE_NAME:
        sh: basename "$PWD"
    cmds:
      - >
        docker run -it
        --network host
        --user {{.UID}}:{{.GID}}
        --volume {{.PWD}}:/root
        --rm
        --name {{.SERVICE_NAME}}
        {{.BUILDER_IMAGE}}
  lint:
    - >
      pylint
      --load-plugins=dslinter 
      --disable=all
      --enable=import,unnecessary-iteration-pandas,unnecessary-iteration-tensorflow,
      nan-numpy,chain-indexing-pandas,datatype-pandas,
      column-selection-pandas,merge-parameter-pandas,inplace-pandas,
      dataframe-conversion-pandas,scaler-missing-scikitlearn,hyperparameters-scikitlearn,
      hyperparameters-tensorflow,hyperparameters-pytorch,memory-release-tensorflow,
      deterministic-pytorch,randomness-control-numpy,randomness-control-scikitlearn,
      randomness-control-tensorflow,randomness-control-pytorch,randomness-control-dataloader-pytorch,
      missing-mask-tensorflow,missing-mask-pytorch,tensor-array-tensorflow,
      forward-pytorch,gradient-clear-pytorch,data-leakage-scikitlearn,
      dependent-threshold-scikitlearn,dependent-threshold-tensorflow,dependent-threshold-pytorch
      --output-format=json:report.json,text:report.txt,colorized
      --reports=y
      src/*.py
  mllint:
    - mllint --output report.md
